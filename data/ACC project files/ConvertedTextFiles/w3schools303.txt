https://www.w3schools.com/html/html5_geolocation.asp
HTML Geolocation API Tutorials References Exercises Videos NEW Menu Log in Paid Courses Website NEW HTML CSS JAVASCRIPT SQL PYTHON PHP BOOTSTRAP HOW TO W3.CSS JAVA JQUERY C++ C# R React Kotlin ? ? ? × Tutorials HTML and CSS Learn HTML Learn CSS Learn RWD Learn Bootstrap Learn W3.CSS Learn Colors Learn Icons Learn Graphics Learn SVG Learn Canvas Learn How To Learn Sass Data Analytics Learn AI Learn Machine Learning Learn Data Science Learn NumPy Learn Pandas Learn SciPy Learn Matplotlib Learn Statistics Learn Excel XML Tutorials Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery JavaScript Learn JavaScript Learn jQuery Learn React Learn AngularJS Learn JSON Learn AJAX Learn AppML Learn W3.JS Programming Learn Python Learn Java Learn C++ Learn C# Learn R Learn Kotlin Learn Go Server Side Learn SQL Learn MySQL Learn PHP Learn ASP Learn Node.js Learn Raspberry Pi Learn Git Web Building Create a Website NEW Web Templates Web Statistics Web Certificates Web Development Code Editor Test Your Typing Speed Play a Code Game Cyber Security Accessibility Data Analytics Learn AI Learn Machine Learning Learn Data Science Learn NumPy Learn Pandas Learn SciPy Learn Matplotlib Learn Statistics Learn Excel Learn Google Sheets XML Tutorials Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery × References HTML HTML Tag Reference HTML Browser Support HTML Event Reference HTML Color Reference HTML Attribute Reference HTML Canvas Reference HTML SVG Reference Google Maps Reference CSS CSS Reference CSS Browser Support CSS Selector Reference Bootstrap 3 Reference Bootstrap 4 Reference W3.CSS Reference Icon Reference Sass Reference JavaScript JavaScript Reference HTML DOM Reference jQuery Reference AngularJS Reference AppML Reference W3.JS Reference Programming Python Reference Java Reference Server Side SQL Reference MySQL Reference PHP Reference ASP Reference XML XML DOM Reference XML Http Reference XSLT Reference XML Schema Reference Character Sets HTML Character Sets HTML ASCII HTML ANSI HTML Windows-1252 HTML ISO-8859-1 HTML Symbols HTML UTF-8 × Exercises and Quizzes Exercises HTML Exercises CSS Exercises JavaScript Exercises SQL Exercises MySQL Exercises PHP Exercises Python Exercises NumPy Exercises Pandas Exercises SciPy Exercises jQuery Exercises Java Exercises C++ Exercises C# Exercises R Exercises Kotlin Exercises Go Exercises Bootstrap Exercises Bootstrap 4 Exercises Bootstrap 5 Exercises Git Exercises Quizzes HTML Quiz CSS Quiz JavaScript Quiz SQL Quiz MySQL Quiz PHP Quiz Python Quiz NumPy Quiz Pandas Quiz SciPy Quiz jQuery Quiz Java Quiz C++ Quiz C# Quiz R Quiz XML Quiz Cyber Security Quiz Bootstrap Quiz Bootstrap 4 Quiz Bootstrap 5 Quiz Accessibility Quiz Courses HTML Course CSS Course JavaScript Course Front End Course SQL Course PHP Course Python Course NumPy Course Pandas Course Data Analytics Course jQuery Course Java Course C++ Course C# Course R Course XML Course Cyber Security Course Accessibility Course Certificates HTML Certificate CSS Certificate JavaScript Certificate Front End Certificate SQL Certificate PHP Certificate Python Certificate Data Science Certificate Bootstrap 3 Certificate Bootstrap 4 Certificate jQuery Certificate Java Certificate C++ Certificate React Certificate XML Certificate × Tutorials References Exercises Paid Courses Spaces Videos Shop HTML Tutorial HTML HOME HTML Introduction HTML Editors HTML Basic HTML Elements HTML Attributes HTML Headings HTML Paragraphs HTML Styles HTML Formatting HTML Quotations HTML Comments HTML Colors Colors RGB HEX HSL HTML CSS HTML Links Links Link Colors Link Bookmarks HTML Images Images Image Map Background Images The Picture Element HTML Favicon HTML Tables HTML Tables Table Borders Table Sizes Table Headers Padding & Spacing Colspan & Rowspan Table Styling Table Colgroup HTML Lists Lists Unordered Lists Ordered Lists Other Lists HTML Block & Inline HTML Classes HTML Id HTML Iframes HTML JavaScript HTML File Paths HTML Head HTML Layout HTML Responsive HTML Computercode HTML Semantics HTML Style Guide HTML Entities HTML Symbols HTML Emojis HTML Charset HTML URL Encode HTML vs. XHTML HTML Forms HTML Forms HTML Form Attributes HTML Form Elements HTML Input Types HTML Input Attributes HTML Input Form Attributes HTML Graphics HTML Canvas HTML SVG HTML Media HTML Media HTML Video HTML Audio HTML Plug-ins HTML YouTube HTML APIs HTML Geolocation HTML Drag/Drop HTML Web Storage HTML Web Workers HTML SSE HTML Examples HTML Examples HTML Quiz HTML Exercises HTML Certificate HTML Summary HTML Accessibility HTML References HTML Tag List HTML Attributes HTML Global Attributes HTML Browser Support HTML Events HTML Colors HTML Canvas HTML Audio/Video HTML Doctypes HTML Character Sets HTML URL Encode HTML Lang Codes HTTP Messages HTTP Methods PX to EM Converter Keyboard Shortcuts HTML Geolocation API ? Previous Next ? The HTML Geolocation API is used to locate a user's position. Locate the User's Position The HTML Geolocation API is used to get the geographical position of a user. Since this can compromise privacy, the position is not available unless the user approves it. Try It Note: Geolocation is most accurate for devices with GPS, like smartphones. Browser Support The numbers in the table specify the first browser version that fully supports Geolocation. API Geolocation 5.0 - 49.0 (http) 50.0 (https) 9.0 3.5 5.0 16.0 Note: As of Chrome 50, the Geolocation API will only work on secure contexts such as HTTPS. If your site is hosted on an non-secure origin (such as HTTP) the requests to get the users location will no longer function. Using HTML Geolocation The getCurrentPosition() method is used to return the user's position. The example below returns the latitude and longitude of the user's position: Example <script> var x = document.getElementById("demo"); function getLocation() {   if (navigator.geolocation) {     navigator.geolocation.getCurrentPosition(showPosition);   } else {     x.innerHTML = "Geolocation is not supported by this browser.";   } } function showPosition(position) {   x.innerHTML = "Latitude: " + position.coords.latitude +   "<br>Longitude: " + position.coords.longitude; } </script> Try it Yourself » Example explained: Check if Geolocation is supported If supported, run the getCurrentPosition() method. If not, display a message to the user If the getCurrentPosition() method is successful, it returns a coordinates object to the function specified in the parameter (showPosition) The showPosition() function outputs the Latitude and Longitude The example above is a very basic Geolocation script, with no error handling. Handling Errors and Rejections The second parameter of the getCurrentPosition() method is used to handle errors. It specifies a function to run if it fails to get the user's location: Example function showError(error) {   switch(error.code) {     case error.PERMISSION_DENIED:       x.innerHTML = "User denied the request for Geolocation."       break;     case error.POSITION_UNAVAILABLE:       x.innerHTML = "Location information is unavailable."       break;     case error.TIMEOUT:       x.innerHTML = "The request to get user location timed out."       break;     case error.UNKNOWN_ERROR:       x.innerHTML = "An unknown error occurred."       break;   } } Try it Yourself » Displaying the Result in a Map To display the result in a map, you need access to a map service, like Google Maps. In the example below, the returned latitude and longitude is used to show the location in a Google Map (using a static image): Example function showPosition(position) {   var latlon = position.coords.latitude + "," + position.coords.longitude;   var img_url = "https://maps.googleapis.com/maps/api/staticmap?center=   "+latlon+"&zoom=14&size=400x300&sensor=false&key=YOUR_KEY";   document.getElementById("mapholder").innerHTML = "<img src='"+img_url+"'>"; } Location-specific Information This page has demonstrated how to show a user's position on a map. Geolocation is also very useful for location-specific information, like: Up-to-date local information Showing Points-of-interest near the user Turn-by-turn navigation (GPS) The getCurrentPosition() Method - Return Data The getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned. The other properties are returned if available: Property Returns coords.latitude The latitude as a decimal number (always returned) coords.longitude The longitude as a decimal number (always returned) coords.accuracy The accuracy of position (always returned) coords.altitude The altitude in meters above the mean sea level (returned if available) coords.altitudeAccuracy The altitude accuracy of position (returned if available) coords.heading The heading as degrees clockwise from North (returned if available) coords.speed The speed in meters per second (returned if available) timestamp The date/time of the response (returned if available) Geolocation Object - Other interesting Methods The Geolocation object also has other interesting methods: watchPosition() - Returns the current position of the user and continues to return updated position as the user moves (like the GPS in a car). clearWatch() - Stops the watchPosition() method. The example below shows the watchPosition() method. You need an accurate GPS device to test this (like smartphone): Example <script> var x = document.getElementById("demo"); function getLocation() {   if (navigator.geolocation) {     navigator.geolocation.watchPosition(showPosition);   } else {     x.innerHTML = "Geolocation is not supported by this browser.";   } } function showPosition(position) {   x.innerHTML = "Latitude: " + position.coords.latitude +   "<br>Longitude: " + position.coords.longitude; } </script> Try it Yourself » ? Previous Next ? NEW We just launched W3Schools videos Explore now COLOR PICKER Get certified by completing a course today! w3schools CERTIFIED . 221 Get started CODE GAME Play Game Report Error Forum About Shop × Report Error If you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail: help@w3schools.com × Thank You For Helping Us! Your message has been sent to W3Schools. Top Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial SQL Tutorial Python Tutorial W3.CSS Tutorial Bootstrap Tutorial PHP Tutorial Java Tutorial C++ Tutorial jQuery Tutorial Top References HTML Reference CSS Reference JavaScript Reference SQL Reference Python Reference W3.CSS Reference Bootstrap Reference PHP Reference HTML Colors Java Reference Angular Reference jQuery Reference Top Examples HTML Examples CSS Examples JavaScript Examples How To Examples SQL Examples Python Examples W3.CSS Examples Bootstrap Examples PHP Examples Java Examples XML Examples jQuery Examples Web Courses HTML Course CSS Course JavaScript Course Front End Course SQL Course Python Course PHP Course jQuery Course Java Course C++ Course C# Course XML Course Get Certified » W3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy. Copyright 1999-2021 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS. "; // txt += ""; txt2 = txt; txt += ""; txt2 += ""; if (cc != "F") { txt += ''; txt += ''; txt += ''; txt += ''; txt2 += ''; txt2 += ''; txt2 += ''; txt2 += ''; } if (cc == "J") { checkIfMypage2IsInView(); window.addEventListener("scroll", checkIfMypage2IsInView); } if (cc == "Q") { if (degrees == 359.99) { txt += "?"; } } txt += '+1?
