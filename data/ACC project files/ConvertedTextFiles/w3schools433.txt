https://www.w3schools.com/css/css3_animations.asp
CSS Animations Tutorials References Exercises Videos NEW Menu Log in Paid Courses Website NEW HTML CSS JAVASCRIPT SQL PYTHON PHP BOOTSTRAP HOW TO W3.CSS JAVA JQUERY C++ C# R React Kotlin ? ? ? × Tutorials HTML and CSS Learn HTML Learn CSS Learn RWD Learn Bootstrap Learn W3.CSS Learn Colors Learn Icons Learn Graphics Learn SVG Learn Canvas Learn How To Learn Sass Data Analytics Learn AI Learn Machine Learning Learn Data Science Learn NumPy Learn Pandas Learn SciPy Learn Matplotlib Learn Statistics Learn Excel XML Tutorials Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery JavaScript Learn JavaScript Learn jQuery Learn React Learn AngularJS Learn JSON Learn AJAX Learn AppML Learn W3.JS Programming Learn Python Learn Java Learn C++ Learn C# Learn R Learn Kotlin Learn Go Server Side Learn SQL Learn MySQL Learn PHP Learn ASP Learn Node.js Learn Raspberry Pi Learn Git Web Building Create a Website NEW Web Templates Web Statistics Web Certificates Web Development Code Editor Test Your Typing Speed Play a Code Game Cyber Security Accessibility Data Analytics Learn AI Learn Machine Learning Learn Data Science Learn NumPy Learn Pandas Learn SciPy Learn Matplotlib Learn Statistics Learn Excel Learn Google Sheets XML Tutorials Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery × References HTML HTML Tag Reference HTML Browser Support HTML Event Reference HTML Color Reference HTML Attribute Reference HTML Canvas Reference HTML SVG Reference Google Maps Reference CSS CSS Reference CSS Browser Support CSS Selector Reference Bootstrap 3 Reference Bootstrap 4 Reference W3.CSS Reference Icon Reference Sass Reference JavaScript JavaScript Reference HTML DOM Reference jQuery Reference AngularJS Reference AppML Reference W3.JS Reference Programming Python Reference Java Reference Server Side SQL Reference MySQL Reference PHP Reference ASP Reference XML XML DOM Reference XML Http Reference XSLT Reference XML Schema Reference Character Sets HTML Character Sets HTML ASCII HTML ANSI HTML Windows-1252 HTML ISO-8859-1 HTML Symbols HTML UTF-8 × Exercises and Quizzes Exercises HTML Exercises CSS Exercises JavaScript Exercises SQL Exercises MySQL Exercises PHP Exercises Python Exercises NumPy Exercises Pandas Exercises SciPy Exercises jQuery Exercises Java Exercises C++ Exercises C# Exercises R Exercises Kotlin Exercises Go Exercises Bootstrap Exercises Bootstrap 4 Exercises Bootstrap 5 Exercises Git Exercises Quizzes HTML Quiz CSS Quiz JavaScript Quiz SQL Quiz MySQL Quiz PHP Quiz Python Quiz NumPy Quiz Pandas Quiz SciPy Quiz jQuery Quiz Java Quiz C++ Quiz C# Quiz R Quiz XML Quiz Cyber Security Quiz Bootstrap Quiz Bootstrap 4 Quiz Bootstrap 5 Quiz Accessibility Quiz Courses HTML Course CSS Course JavaScript Course Front End Course SQL Course PHP Course Python Course NumPy Course Pandas Course Data Analytics Course jQuery Course Java Course C++ Course C# Course R Course XML Course Cyber Security Course Accessibility Course Certificates HTML Certificate CSS Certificate JavaScript Certificate Front End Certificate SQL Certificate PHP Certificate Python Certificate Data Science Certificate Bootstrap 3 Certificate Bootstrap 4 Certificate jQuery Certificate Java Certificate C++ Certificate React Certificate XML Certificate × Tutorials References Exercises Paid Courses Spaces Videos Shop CSS Tutorial CSS HOME CSS Introduction CSS Syntax CSS Selectors CSS How To CSS Comments CSS Colors Colors RGB HEX HSL CSS Backgrounds Background Color Background Image Background Repeat Background Attachment Background Shorthand CSS Borders Borders Border Width Border Color Border Sides Border Shorthand Rounded Borders CSS Margins Margins Margin Collapse CSS Padding CSS Height/Width CSS Box Model CSS Outline Outline Outline Width Outline Color Outline Shorthand Outline Offset CSS Text Text Color Text Alignment Text Decoration Text Transformation Text Spacing Text Shadow CSS Fonts Font Family Font Web Safe Font Fallbacks Font Style Font Size Font Google Font Pairings Font Shorthand CSS Icons CSS Links CSS Lists CSS Tables Table Borders Table Size Table Alignment Table Style Table Responsive CSS Display CSS Max-width CSS Position CSS Z-index CSS Overflow CSS Float Float Clear Float Examples CSS Inline-block CSS Align CSS Combinators CSS Pseudo-class CSS Pseudo-element CSS Opacity CSS Navigation Bar Navbar Vertical Navbar Horizontal Navbar CSS Dropdowns CSS Image Gallery CSS Image Sprites CSS Attr Selectors CSS Forms CSS Counters CSS Website Layout CSS Units CSS Specificity CSS !important CSS Math Functions CSS Advanced CSS Rounded Corners CSS Border Images CSS Backgrounds CSS Colors CSS Color Keywords CSS Gradients Linear Gradients Radial Gradients Conic Gradients CSS Shadows Shadow Effects Box Shadow CSS Text Effects CSS Web Fonts CSS 2D Transforms CSS 3D Transforms CSS Transitions CSS Animations CSS Tooltips CSS Style Images CSS Image Reflection CSS object-fit CSS object-position CSS Buttons CSS Pagination CSS Multiple Columns CSS User Interface CSS Variables The var() Function Overriding Variables Variables and JavaScript Variables in Media Queries CSS Box Sizing CSS Media Queries CSS MQ Examples CSS Flexbox CSS Flexbox CSS Flex Container CSS Flex Items CSS Flex Responsive CSS Responsive RWD Intro RWD Viewport RWD Grid View RWD Media Queries RWD Images RWD Videos RWD Frameworks RWD Templates CSS Grid Grid Intro Grid Container Grid Item CSS SASS SASS Tutorial CSS Examples CSS Templates CSS Examples CSS Quiz CSS Exercises CSS Certificate CSS References CSS Reference CSS Selectors CSS Functions CSS Reference Aural CSS Web Safe Fonts CSS Animatable CSS Units CSS PX-EM Converter CSS Colors CSS Color Values CSS Default Values CSS Browser Support CSS Animations ? Previous Next ? CSS Animations CSS allows animation of HTML elements without using JavaScript or Flash! CSS In this chapter you will learn about the following properties: @keyframes animation-name animation-duration animation-delay animation-iteration-count animation-direction animation-timing-function animation-fill-mode animation Browser Support for Animations The numbers in the table specify the first browser version that fully supports the property. Property @keyframes 43.0 10.0 16.0 9.0 30.0 animation-name 43.0 10.0 16.0 9.0 30.0 animation-duration 43.0 10.0 16.0 9.0 30.0 animation-delay 43.0 10.0 16.0 9.0 30.0 animation-iteration-count 43.0 10.0 16.0 9.0 30.0 animation-direction 43.0 10.0 16.0 9.0 30.0 animation-timing-function 43.0 10.0 16.0 9.0 30.0 animation-fill-mode 43.0 10.0 16.0 9.0 30.0 animation 43.0 10.0 16.0 9.0 30.0 What are CSS Animations? An animation lets an element gradually change from one style to another. You can change as many CSS properties you want, as many times as you want. To use CSS animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times. The @keyframes Rule When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times. To get an animation to work, you must bind the animation to an element. The following example binds the "example" animation to the <div> element. The animation will last for 4 seconds, and it will gradually change the background-color of the <div> element from "red" to "yellow": Example /* The animation code */ @keyframes example {   from {background-color: red;}   to {background-color: yellow;} } /* The element to apply the animation to */ div {   width: 100px;   height: 100px;   background-color: red;   animation-name: example;   animation-duration: 4s; } Try it Yourself » Note: The animation-duration property defines how long an animation should take to complete. If the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds).  In the example above we have specified when the style will change by using the keywords "from" and "to" (which represents 0% (start) and 100% (complete)). It is also possible to use percent. By using percent, you can add as many style changes as you like. The following example will change the background-color of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete: Example /* The animation code */ @keyframes example {   0%   {background-color: red;}   25%  {background-color: yellow;}   50%  {background-color: blue;}   100% {background-color: green;} } /* The element to apply the animation to */ div {   width: 100px;   height: 100px;   background-color: red;   animation-name: example;   animation-duration: 4s; } Try it Yourself » The following example will change both the background-color and the position of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete: Example /* The animation code */ @keyframes example {   0%   {background-color:red; left:0px; top:0px;}   25%  {background-color:yellow; left:200px; top:0px;}   50%  {background-color:blue; left:200px; top:200px;}   75%  {background-color:green; left:0px; top:200px;}   100% {background-color:red; left:0px; top:0px;} } /* The element to apply the animation to */ div {   width: 100px;   height: 100px;   position: relative;   background-color: red;   animation-name: example;   animation-duration: 4s; } Try it Yourself » Delay an Animation The animation-delay property specifies a delay for the start of an animation. The following example has a 2 seconds delay before starting the animation: Example div {   width: 100px;   height: 100px;   position: relative;   background-color: red;   animation-name: example;   animation-duration: 4s;   animation-delay: 2s; } Try it Yourself » Negative values are also allowed. If using negative values, the animation will start as if it had already been playing for N seconds. In the following example, the animation will start as if it had already been playing for 2 seconds: Example div {   width: 100px;   height: 100px;   position: relative;   background-color: red;   animation-name: example;   animation-duration: 4s;   animation-delay: -2s; } Try it Yourself » Set How Many Times an Animation Should Run The animation-iteration-count property specifies the number of times an animation should run. The following example will run the animation 3 times before it stops: Example div {   width: 100px;   height: 100px;   position: relative;   background-color: red;   animation-name: example;   animation-duration: 4s;   animation-iteration-count: 3; } Try it Yourself » The following example uses the value "infinite" to make the animation continue for ever: Example div {   width: 100px;   height: 100px;   position: relative;   background-color: red;   animation-name: example;   animation-duration: 4s;   animation-iteration-count: infinite; } Try it Yourself » Run Animation in Reverse Direction or Alternate Cycles The animation-direction property specifies whether an animation should be played forwards, backwards or in alternate cycles. The animation-direction property can have the following values: normal - The animation is played as normal (forwards). This is default reverse - The animation is played in reverse direction (backwards) alternate - The animation is played forwards first, then backwards alternate-reverse - The animation is played backwards first, then forwards The following example will run the animation in reverse direction (backwards): Example div {   width: 100px;   height: 100px;   position: relative;   background-color: red;   animation-name: example;   animation-duration: 4s;   animation-direction: reverse; } Try it Yourself » The following example uses the value "alternate" to make the animation run forwards first, then backwards: Example div {   width: 100px;   height: 100px;   position: relative;   background-color: red;   animation-name: example;   animation-duration: 4s;   animation-iteration-count: 2;   animation-direction: alternate; } Try it Yourself » The following example uses the value "alternate-reverse" to make the animation run backwards first, then forwards: Example div {   width: 100px;   height: 100px;   position: relative;   background-color: red;   animation-name: example;   animation-duration: 4s;   animation-iteration-count: 2;   animation-direction: alternate-reverse; } Try it Yourself » Specify the Speed Curve of the Animation The animation-timing-function property specifies the speed curve of the animation. The animation-timing-function property can have the following values: ease - Specifies an animation with a slow start, then fast, then end slowly (this is default) linear - Specifies an animation with the same speed from start to end ease-in - Specifies an animation with a slow start ease-out - Specifies an animation with a slow end ease-in-out - Specifies an animation with a slow start and end cubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function The following example shows some of the different speed curves that can be used: Example #div1 {animation-timing-function: linear;} #div2 {animation-timing-function: ease;} #div3 {animation-timing-function: ease-in;} #div4 {animation-timing-function: ease-out;} #div5 {animation-timing-function: ease-in-out;} Try it Yourself » Specify the fill-mode For an Animation CSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior. The animation-fill-mode property specifies a style for the target element when the animation is not playing (before it starts, after it ends, or both). The animation-fill-mode property can have the following values: none - Default value. Animation will not apply any styles to the element before or after it is executing forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count) backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions The following example lets the <div> element retain the style values from the last keyframe when the animation ends: Example div {   width: 100px;   height: 100px;   background: red;   position: relative;   animation-name: example;   animation-duration: 3s;   animation-fill-mode: forwards; } Try it Yourself » The following example lets the <div> element get the style values set by the first keyframe before the animation starts (during the animation-delay period): Example div {   width: 100px;   height: 100px;   background: red;   position: relative;   animation-name: example;   animation-duration: 3s;   animation-delay: 2s;   animation-fill-mode: backwards; } Try it Yourself » The following example lets the <div> element get the style values set by the first keyframe before the animation starts, and retain the style values from the last keyframe when the animation ends: Example div {   width: 100px;   height: 100px;   background: red;   position: relative;   animation-name: example;   animation-duration: 3s;   animation-delay: 2s;   animation-fill-mode: both; } Try it Yourself » Animation Shorthand Property The example below uses six of the animation properties: Example div {   animation-name: example;   animation-duration: 5s;   animation-timing-function: linear;   animation-delay: 2s;   animation-iteration-count: infinite;   animation-direction: alternate; } Try it Yourself » The same animation effect as above can be achieved by using the shorthand animation property: Example div {   animation: example 5s linear 2s infinite alternate; } Try it Yourself » Test Yourself With Exercises Exercise: Add a 2 second animation for the <div> element, which changes the color from red to blue. Call the animation "example". 
<style>
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: ;
  : 2s;
}

@keyframes example {
  from {: red;}
  to {: blue;}
}
</style>

<body>
  <div>This is a div</div>
</body>
 Submit Answer » Start the Exercise CSS Animation Properties The following table lists the @keyframes rule and all the CSS animation properties: Property Description @keyframes Specifies the animation code animation A shorthand property for setting all the animation properties animation-delay Specifies a delay for the start of an animation animation-direction Specifies whether an animation should be played forwards, backwards or in alternate cycles animation-duration Specifies how long time an animation should take to complete one cycle animation-fill-mode Specifies a style for the element when the animation is not playing (before it starts, after it ends, or both) animation-iteration-count Specifies the number of times an animation should be played animation-name Specifies the name of the @keyframes animation animation-play-state Specifies whether the animation is running or paused animation-timing-function Specifies the speed curve of the animation ? Previous Next ? NEW We just launched W3Schools videos Explore now COLOR PICKER Get certified by completing a course today! w3schools CERTIFIED . 221 Get started CODE GAME Play Game Report Error Forum About Shop × Report Error If you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail: help@w3schools.com × Thank You For Helping Us! Your message has been sent to W3Schools. Top Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial SQL Tutorial Python Tutorial W3.CSS Tutorial Bootstrap Tutorial PHP Tutorial Java Tutorial C++ Tutorial jQuery Tutorial Top References HTML Reference CSS Reference JavaScript Reference SQL Reference Python Reference W3.CSS Reference Bootstrap Reference PHP Reference HTML Colors Java Reference Angular Reference jQuery Reference Top Examples HTML Examples CSS Examples JavaScript Examples How To Examples SQL Examples Python Examples W3.CSS Examples Bootstrap Examples PHP Examples Java Examples XML Examples jQuery Examples Web Courses HTML Course CSS Course JavaScript Course Front End Course SQL Course Python Course PHP Course jQuery Course Java Course C++ Course C# Course XML Course Get Certified » W3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy. Copyright 1999-2021 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS. "; // txt += ""; txt2 = txt; txt += ""; txt2 += ""; if (cc != "F") { txt += ''; txt += ''; txt += ''; txt += ''; txt2 += ''; txt2 += ''; txt2 += ''; txt2 += ''; } if (cc == "J") { checkIfMypage2IsInView(); window.addEventListener("scroll", checkIfMypage2IsInView); } if (cc == "Q") { if (degrees == 359.99) { txt += "?"; } } txt += '+1?
